{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"reference/utils/","text":"utils get_config () Reads important settings and variables to run the analysis properly Returns: Type Description dict Returns dictionary of program variables parsed from config.cfg Source code in fastdna-faiss\\utils.py def get_config () -> dict : \"\"\"Reads important settings and variables to run the analysis properly Returns: dict: Returns dictionary of program variables parsed from `config.cfg` \"\"\" config = configparser . ConfigParser () config . read ( \"config.cfg\" ) config_dict = { section : dict ( config . items ( section )) for section in config . sections ()} return config_dict get_config_obj () Creates program configuration object from configuration file Returns: Type Description ConfigParser Returns ConfigParser object created from config.cfg Source code in fastdna-faiss\\utils.py def get_config_obj () -> configparser . ConfigParser : \"\"\"Creates program configuration object from configuration file Returns: ConfigParser: Returns ConfigParser object created from `config.cfg` \"\"\" config = configparser . ConfigParser () config . read ( \"config.cfg\" ) return config get_host_data () Reads Edwards' dataset of host information. Returns: Type Description dict Returns dictionary of data parsed from host.json Source code in fastdna-faiss\\utils.py def get_host_data () -> dict : \"\"\"Reads Edwards' dataset of host information. Returns: dict: Returns dictionary of data parsed from `host.json` \"\"\" with open ( \"host.json\" , \"r\" ) as fh : host_data = json . load ( fh ) return host_data get_hostvir_data () Reads modified dataset of host information (additional information about infecting viruses). Returns: Type Description dict Returns dictionary of data parsed from hostvir.json Source code in fastdna-faiss\\utils.py def get_hostvir_data () -> dict : \"\"\"Reads modified dataset of host information (additional information about infecting viruses). Returns: dict: Returns dictionary of data parsed from `hostvir.json` \"\"\" with open ( 'hostvir.json' , 'r' ) as fh : hostvir_data = json . load ( fh ) return hostvir_data get_tax_data () Reads modified dataset of host information (taxid as a key). Returns: Type Description dict Returns dictionary of data parsed from tax.json Source code in fastdna-faiss\\utils.py def get_tax_data () -> dict : \"\"\"Reads modified dataset of host information (taxid as a key). Returns: dict: Returns dictionary of data parsed from `tax.json` \"\"\" with open ( \"tax.json\" , \"r\" ) as fh : tax_data = json . load ( fh ) return tax_data get_virus_data () Reads Edwards' dataset of virus information. Returns: Type Description dict Returns dictionary of data parsed from virus.json Source code in fastdna-faiss\\utils.py def get_virus_data () -> dict : \"\"\"Reads Edwards' dataset of virus information. Returns: dict: Returns dictionary of data parsed from `virus.json` \"\"\" with open ( \"virus.json\" , \"r\" ) as fh : virus_data = json . load ( fh ) return virus_data make_hostvir_json () Creates hostvir.json file which is a modified Edwards' host.json file with additional information about infecting viruses. Each record has a value with a list of infecting viruses. Source code in fastdna-faiss\\utils.py def make_hostvir_json (): \"\"\"Creates `hostvir.json` file which is a modified Edwards' `host.json` file with additional information about infecting viruses. Each record has a value with a list of infecting viruses. \"\"\" host_data = get_host_data () virus_data = get_virus_data () for host in host_data : lineage_name = host_data [ host ][ 'lineage_names' ][ 6 ] viruses = [] for virus in virus_data : if virus_data [ virus ][ 'host' ][ 'organism_name' ] == lineage_name : viruses . append ( virus ) host_data [ host ][ 'virus_id' ] = viruses with open ( 'hostvir.json' , 'w' ) as fh : json . dump ( host_data , fh ) make_tax_json () Creates tax.json file which is a modified Edwards' host.json file where keys are represented as taxid but ncbi_id information is still retained as one of the values Source code in fastdna-faiss\\utils.py def make_tax_json (): \"\"\"Creates `tax.json` file which is a modified Edwards' `host.json` file where keys are represented as taxid but ncbi_id information is still retained as one of the values \"\"\" host_data = get_host_data () keys = list ( host_data . keys ()) for key in keys : taxid = host_data [ key ][ \"taxid\" ] host_data [ key ][ \"ncbi_id\" ] = host_data [ key ] . pop ( \"taxid\" ) host_data [ key ][ \"ncbi_id\" ] = key data = host_data [ key ] host_data [ taxid ] = host_data . pop ( key ) with open ( \"tax.json\" , \"w\" ) as fh : json . dump ( host_data , fh , indent = 4 ) time_this ( func ) UNUSED Decorator which returns information about execution of decorated function. Source code in fastdna-faiss\\utils.py def time_this ( func ): \"\"\"*UNUSED* Decorator which returns information about execution of decorated function. \"\"\" @functools . wraps ( func ) def wrapper_timer ( * args , ** kwargs ): start = timer () values = func ( * args , ** kwargs ) end = timer () runtime = end - start if values is None : print ( f \" { Fore . RED }{ func . __name__ !r} execution error\" ) else : print ( f \" { Fore . GREEN }{ func . __name__ !r} executed successfully in { runtime : .6f } seconds\" ) return values [ 0 ] return wrapper_timer","title":"utils"},{"location":"reference/utils/#utils_1","text":"","title":"utils"},{"location":"reference/utils/#utils.get_config","text":"Reads important settings and variables to run the analysis properly Returns: Type Description dict Returns dictionary of program variables parsed from config.cfg Source code in fastdna-faiss\\utils.py def get_config () -> dict : \"\"\"Reads important settings and variables to run the analysis properly Returns: dict: Returns dictionary of program variables parsed from `config.cfg` \"\"\" config = configparser . ConfigParser () config . read ( \"config.cfg\" ) config_dict = { section : dict ( config . items ( section )) for section in config . sections ()} return config_dict","title":"get_config()"},{"location":"reference/utils/#utils.get_config_obj","text":"Creates program configuration object from configuration file Returns: Type Description ConfigParser Returns ConfigParser object created from config.cfg Source code in fastdna-faiss\\utils.py def get_config_obj () -> configparser . ConfigParser : \"\"\"Creates program configuration object from configuration file Returns: ConfigParser: Returns ConfigParser object created from `config.cfg` \"\"\" config = configparser . ConfigParser () config . read ( \"config.cfg\" ) return config","title":"get_config_obj()"},{"location":"reference/utils/#utils.get_host_data","text":"Reads Edwards' dataset of host information. Returns: Type Description dict Returns dictionary of data parsed from host.json Source code in fastdna-faiss\\utils.py def get_host_data () -> dict : \"\"\"Reads Edwards' dataset of host information. Returns: dict: Returns dictionary of data parsed from `host.json` \"\"\" with open ( \"host.json\" , \"r\" ) as fh : host_data = json . load ( fh ) return host_data","title":"get_host_data()"},{"location":"reference/utils/#utils.get_hostvir_data","text":"Reads modified dataset of host information (additional information about infecting viruses). Returns: Type Description dict Returns dictionary of data parsed from hostvir.json Source code in fastdna-faiss\\utils.py def get_hostvir_data () -> dict : \"\"\"Reads modified dataset of host information (additional information about infecting viruses). Returns: dict: Returns dictionary of data parsed from `hostvir.json` \"\"\" with open ( 'hostvir.json' , 'r' ) as fh : hostvir_data = json . load ( fh ) return hostvir_data","title":"get_hostvir_data()"},{"location":"reference/utils/#utils.get_tax_data","text":"Reads modified dataset of host information (taxid as a key). Returns: Type Description dict Returns dictionary of data parsed from tax.json Source code in fastdna-faiss\\utils.py def get_tax_data () -> dict : \"\"\"Reads modified dataset of host information (taxid as a key). Returns: dict: Returns dictionary of data parsed from `tax.json` \"\"\" with open ( \"tax.json\" , \"r\" ) as fh : tax_data = json . load ( fh ) return tax_data","title":"get_tax_data()"},{"location":"reference/utils/#utils.get_virus_data","text":"Reads Edwards' dataset of virus information. Returns: Type Description dict Returns dictionary of data parsed from virus.json Source code in fastdna-faiss\\utils.py def get_virus_data () -> dict : \"\"\"Reads Edwards' dataset of virus information. Returns: dict: Returns dictionary of data parsed from `virus.json` \"\"\" with open ( \"virus.json\" , \"r\" ) as fh : virus_data = json . load ( fh ) return virus_data","title":"get_virus_data()"},{"location":"reference/utils/#utils.make_hostvir_json","text":"Creates hostvir.json file which is a modified Edwards' host.json file with additional information about infecting viruses. Each record has a value with a list of infecting viruses. Source code in fastdna-faiss\\utils.py def make_hostvir_json (): \"\"\"Creates `hostvir.json` file which is a modified Edwards' `host.json` file with additional information about infecting viruses. Each record has a value with a list of infecting viruses. \"\"\" host_data = get_host_data () virus_data = get_virus_data () for host in host_data : lineage_name = host_data [ host ][ 'lineage_names' ][ 6 ] viruses = [] for virus in virus_data : if virus_data [ virus ][ 'host' ][ 'organism_name' ] == lineage_name : viruses . append ( virus ) host_data [ host ][ 'virus_id' ] = viruses with open ( 'hostvir.json' , 'w' ) as fh : json . dump ( host_data , fh )","title":"make_hostvir_json()"},{"location":"reference/utils/#utils.make_tax_json","text":"Creates tax.json file which is a modified Edwards' host.json file where keys are represented as taxid but ncbi_id information is still retained as one of the values Source code in fastdna-faiss\\utils.py def make_tax_json (): \"\"\"Creates `tax.json` file which is a modified Edwards' `host.json` file where keys are represented as taxid but ncbi_id information is still retained as one of the values \"\"\" host_data = get_host_data () keys = list ( host_data . keys ()) for key in keys : taxid = host_data [ key ][ \"taxid\" ] host_data [ key ][ \"ncbi_id\" ] = host_data [ key ] . pop ( \"taxid\" ) host_data [ key ][ \"ncbi_id\" ] = key data = host_data [ key ] host_data [ taxid ] = host_data . pop ( key ) with open ( \"tax.json\" , \"w\" ) as fh : json . dump ( host_data , fh , indent = 4 )","title":"make_tax_json()"},{"location":"reference/utils/#utils.time_this","text":"UNUSED Decorator which returns information about execution of decorated function. Source code in fastdna-faiss\\utils.py def time_this ( func ): \"\"\"*UNUSED* Decorator which returns information about execution of decorated function. \"\"\" @functools . wraps ( func ) def wrapper_timer ( * args , ** kwargs ): start = timer () values = func ( * args , ** kwargs ) end = timer () runtime = end - start if values is None : print ( f \" { Fore . RED }{ func . __name__ !r} execution error\" ) else : print ( f \" { Fore . GREEN }{ func . __name__ !r} executed successfully in { runtime : .6f } seconds\" ) return values [ 0 ] return wrapper_timer","title":"time_this()"}]}